import json
import random
import io
from flask import Flask, render_template, request, send_file, flash
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Spacer, Paragraph
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_RIGHT
from reportlab.lib.units import cm

app = Flask(__name__)
app.secret_key = 'nassirundercooover'


# Register the VT323 font
pdfmetrics.registerFont(TTFont('VT323', 'static/VT323-Regular.ttf'))  # Ensure you have the font file in static folder

def load_words(json_file):
    """Loads categories and words from a JSON file."""
    with open(json_file, 'r') as f:
        data = json.load(f)
    return data['categories']

def generate_role_cards(words, num_undercovers, num_mr_whites):
    """Generates role based cards."""
    selected_words = random.sample(words, num_undercovers + num_mr_whites)
    undercover_words = selected_words[:num_undercovers]
    mr_white_words = selected_words[num_undercovers:num_undercovers + num_mr_whites]
    
    undercover_cards = undercover_words
    mr_white_cards = ["^^" for _ in range(num_mr_whites)]
    
    return undercover_cards + mr_white_cards

def generate_player_cards(words, num_players, num_undercovers, num_mr_whites):
    """Generates a set of cards for a single game."""
    num_regular_players = num_players - num_undercovers - num_mr_whites
    regular_word = random.choice(words)
    regular_cards = [regular_word for _ in range(num_regular_players)]
    role_cards = generate_role_cards(words, num_undercovers, num_mr_whites)
    all_cards = regular_cards + role_cards
    random.shuffle(all_cards)
    return all_cards
    
def generate_cards_for_game(categories, num_players, num_undercovers, num_mr_whites):
    """Generates the cards for the game."""
    words = []
    for category in categories:
        words.extend(categories[category])
    
    if num_players <= 0 or num_undercovers < 0:
        return "Requires at least 1 player and 0 undercover"
    
    if num_players < (num_undercovers + num_mr_whites):
        return "Number of special roles cannot exceed the number of players"

    cards = generate_player_cards(words, num_players, num_undercovers, num_mr_whites)
    return cards

def create_pdf_cards(all_cards, buffer, cards_per_row=3, card_width=6*cm, card_height=1.5*cm):
    """Creates a PDF with the game cards in a grid layout, with horizontal rules between each game."""
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        name='Title',
        parent=styles['Normal'],
        fontName='VT323',
        fontSize=36,
        alignment=TA_CENTER
    )
    custom_style = ParagraphStyle(
        name='Custom',
        parent=styles['Normal'],
        fontName='VT323',
        fontSize=12,
        alignment=TA_CENTER
    )
    footer_style = ParagraphStyle(
        name='Footer',
        parent=styles['Normal'],
        fontName='VT323',
        fontSize=12,
        alignment=TA_CENTER
    )
    page_num_style = ParagraphStyle(
        name='PageNum',
        parent=styles['Normal'],
        fontName='VT323',
        fontSize=12,
        alignment=TA_RIGHT
    )
    elements = []

    # Add title on the first page without any spacer above it
    title = Paragraph("Undercoover", title_style)
    elements.append(title)
    elements.append(Spacer(1, 36))

    for i, cards in enumerate(all_cards):
        # Filter out empty cards
        cards = [card for card in cards if card.strip()]
        if not cards:
            continue

        data = [cards[j:j + cards_per_row] for j in range(0, len(cards), cards_per_row)]
        row_heights = [card_height] * len(data)
        table = Table(data, colWidths=[card_width] * cards_per_row, rowHeights=row_heights)
        table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, -1), 'VT323'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        elements.append(table)
        if i < len(all_cards) - 1:
            elements.append(Spacer(1, 12))
            elements.append(Paragraph('<hr/>', styles['Normal']))

    footer = Paragraph("Generated by Undercoover: A project by Nasr Allah Amine.", footer_style)
    elements.append(Spacer(1, 12))
    elements.append(footer)

    def add_page_number(canvas, doc):
        page_num = Paragraph(f"Page {doc.page}", page_num_style)
        width, height = letter
        page_num.wrapOn(canvas, width, height)
        page_num.drawOn(canvas, width - 2 * cm, 1 * cm)

    doc.build(elements, onFirstPage=add_page_number, onLaterPages=add_page_number)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate_pdf', methods=['POST'])
def generate_pdf():
    try:
        num_players = int(request.form['playerCount'])
        num_undercovers = int(request.form['undercoverCount'])
        num_mr_whites = int(request.form['mrWhiteCount'])
        num_games = int(request.form['pdfCount'])
        
    except ValueError:
        flash("Invalid input. Please enter numbers only.", 'error')
        return render_template('index.html')

    json_file = "static/categories_words.json"
    categories = load_words(json_file)

    all_cards = []
    for _ in range(num_games):
        cards = generate_cards_for_game(categories, num_players, num_undercovers, num_mr_whites)
        if isinstance(cards, str):
            flash(cards, 'error')
            return render_template('index.html')
        all_cards.append(cards)
    
    pdf_buffer = io.BytesIO()
    create_pdf_cards(all_cards, pdf_buffer)
    pdf_buffer.seek(0)
    
    return send_file(pdf_buffer, as_attachment=True, download_name="undercover_cards.pdf", mimetype="application/pdf")

if __name__ == '__main__':
    app.run(debug=True)